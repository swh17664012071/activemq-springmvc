<?xml version="1.0" encoding="UTF-8"?>
<!-- scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 
     scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。 当scan为true时，此属性生效。默认的时间间隔为1分钟(60 
	seconds)。
	 debug: 当此属性设置为true时，将打印出logback内部日志信息,默认值为false。 -->
<configuration scan="true" scanPeriod="120 seconds" debug="false">

	<!-- 定义日志文件所在目录 -->
	<property name="LOG_HOME" value="d:/logs/" />

	<!--控制台输出 -->
	<appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<!--解决乱码问题 -->
			<charset>UTF-8</charset>
			<!-- 格式化输出：
			      %d表示日期，
				  %thread表示线程名，
				  %-5level：级别从左显示5个字符宽度 
				  %logger输出日志的logger名
				  %msg：日志消息，
				  %n是换行符 -->
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36}: %msg%n</pattern>
		</encoder>
	</appender>

	<!--滚动文件 -->
	<appender name="infoLogFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 过滤掉ERROR日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>DENY</onMatch>
			<onMismatch>ACCEPT</onMismatch>
		</filter>
		
		<encoder>
			<charset>UTF-8</charset>
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36}: %msg%n</pattern>
		</encoder>
		
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME}/info.%d{yyyy-MM-dd}.log</fileNamePattern>
			<maxHistory>30</maxHistory><!--保存最近30天的日志 -->
		</rollingPolicy>
	</appender>

	<!--滚动文件 -->
	<appender name="errorLogFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- ThresholdFilter:临界值过滤器，过滤掉 TRACE 和 DEBUG 级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>error</level>
		</filter>
		
		<encoder>
			<charset>UTF-8</charset>
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36}: %msg%n</pattern>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME}/error.%d{yyyy-MM-dd}.log
			</fileNamePattern>
			<maxHistory>30</maxHistory><!--保存最近30天的日志 -->
		</rollingPolicy>

	</appender>

	<!--root是所有logger的祖先，均继承root，如果某一个自定义的logger没有指定level，就会寻找 父logger看有没有指定级别，直到找到root。 -->
	<root level="info">
		<appender-ref ref="stdout" />
		<appender-ref ref="infoLogFile" />
		<appender-ref ref="errorLogFile" />
	</root>

	<appender name="mybatisSQL" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<charset>UTF-8</charset>
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36}: %msg%n</pattern>
		</encoder>
	</appender>
	
	<logger name="com.etoak.mapper" level="DEBUG" additivity="false">
		<appender-ref ref="mybatisSQL" />
	</logger>

</configuration>